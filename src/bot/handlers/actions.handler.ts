import { Telegraf, Context } from "telegraf";
import { logger } from "../../config/logger";
import { analyzeTranscript } from "../../ai/analyzeTranscript";
import { analyzeSummary } from "../../ai/analyzeSummary";
import escapeMarkdownV2 from "../../utils/escapeMarkdown";

const MAX_MESSAGE_LENGTH = 4096;

function sanitizeMarkdownV2(text: string): string {
  // 1. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–∫–∏ (#...) –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ![...](...).
  // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url) ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∏—Ö.
  text = text.replace(/^#+\s*/gm, "");
  text = text.replace(/!\[([^\]]*)\]\(([^)]+)\)/g, "$1");
  return text;
}

function splitMessage(text: string, maxLength = MAX_MESSAGE_LENGTH): string[] {
  const chunks: string[] = [];
  let current = 0;
  while (current < text.length) {
    chunks.push(text.slice(current, current + maxLength));
    current += maxLength;
  }
  return chunks;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å parse_mode: "MarkdownV2", —ç–∫—Ä–∞–Ω–∏—Ä—É—è –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
 */
async function replyChunks(ctx: Context, text: string) {
  // 1. –ù–µ–º–Ω–æ–≥–æ –ø–æ—á–∏—Å—Ç–∏–º
  const sanitized = sanitizeMarkdownV2(text);

  // 2. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —Ä–∞–∑—Ä–µ—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã **...** –∏ _..._
  const escaped = escapeMarkdownV2(sanitized);

  // 3. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ <= 4096 —Å–∏–º–≤–æ–ª–æ–≤
  const chunks = splitMessage(escaped);

  for (const chunk of chunks) {
    try {
      await ctx.reply(chunk, { parse_mode: "MarkdownV2" });
    } catch (err) {
      logger.warn(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ MarkdownV2, –ø—Ä–æ–±—É—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        err
      );
      await ctx.reply(chunk);
    }
    await new Promise((res) => setTimeout(res, 300));
  }
}

export const registerActionHandlers = (bot: Telegraf) => {
  bot.action(/transcribe:(.+)/, async (ctx) => {
    const url = ctx.match[1];
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é: ${url}`);
    await ctx.reply("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...");
    try {
      const result = await analyzeTranscript(url);
      await replyChunks(ctx, result);
    } catch (e) {
      logger.error(e);
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤–∏–¥–µ–æ");
    }
  });

  bot.action(/summary:(.+)/, async (ctx) => {
    const url = ctx.match[1];
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å—É—Ç—å –∏ —Ç–µ—Ä–º–∏–Ω—ã: ${url}`);
    await ctx.reply("üß† –ü–æ–ª—É—á–∞—é –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...");
    try {
      const result = await analyzeSummary(url);
      await replyChunks(ctx, result);
    } catch (e) {
      logger.error(e);
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è");
    }
  });

  bot.action(/cancel:(.+)/, async (ctx) => {
    const url = ctx.match[1];
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–∫–∏: ${url}`);
    await ctx.reply("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
  });
};
